{
  "assignments": [
    {
      "track": "ruby",
      "slug": "word-count",
      "readme": "# Word Count\n\nWrite a program that given a phrase can count the occurrences of each word in that phrase.\n\nFor example for the input `\"olly olly in come free\"`\n\n```plain\nolly: 2\nin: 1\ncome: 1\nfree: 1\n```\n\n\n\n## Source\n\nThe golang tour [view source](http://tour.golang.org)\n",
      "test_file": "word-count_test.rb",
      "tests": "require 'minitest/autorun'\nrequire 'minitest/pride'\nrequire_relative 'words'\n\nclass WordsTest < MiniTest::Unit::TestCase\n\n  def test_count_one_word\n    words = Words.new(\"word\")\n    counts = {\"word\" => 1}\n    assert_equal counts, words.count\n  end\n\n  def test_count_one_of_each\n    skip\n    words = Words.new(\"one of each\")\n    counts = {\"one\" => 1, \"of\" => 1, \"each\" => 1}\n    assert_equal counts, words.count\n  end\n\n  def test_count_multiple_occurrences\n    skip\n    words = Words.new(\"one fish two fish red fish blue fish\")\n    counts = {\"one\"=>1, \"fish\"=>4, \"two\"=>1, \"red\"=>1, \"blue\"=>1}\n    assert_equal counts, words.count\n  end\n\n  def test_ignore_punctuation\n    skip\n    words = Words.new(\"car : carpet as java : javascript!!&@$%^&\")\n    counts = {\"car\"=>1, \"carpet\"=>1, \"as\"=>1, \"java\"=>1, \"javascript\"=>1}\n    assert_equal counts, words.count\n  end\n\n  def test_include_numbers\n    skip\n    words = Words.new(\"testing, 1, 2 testing\")\n    counts = {\"testing\" => 2, \"1\" => 1, \"2\" => 1}\n    assert_equal counts, words.count\n  end\n\n  def test_normalize_case\n    skip\n    words = Words.new(\"go Go GO\")\n    counts = {\"go\" => 3}\n    assert_equal counts, words.count\n  end\n\nend\n\n"
    },
    {
      "track": "javascript",
      "slug": "anagram",
      "readme": "# Anagram\n\nWrite a program that, given a word and a list of possible anagrams, selects the correct one(s).\n\nGiven `\"listen\"` and `%w(enlists google inlets banana)` the program should return \"inlets\".\n\n\n## Source\n\nInspired by the Extreme Startup game [view source](https://github.com/rchatley/extreme_startup)\n",
      "test_file": "anagram_test.spec.js",
      "tests": "require('./anagram');\n\ndescribe('Anagram', function() {\n\n  it(\"no matches\",function() {\n    var detector = new Anagram(\"diaper\");\n    var matches = detector.match([ \"hello\", \"world\", \"zombies\", \"pants\"]);\n    expect(matches).toEqual([]);\n  });\n\n  xit(\"detects simple anagram\",function() {\n    var detector = new Anagram(\"ba\");\n    var matches = detector.match(['ab', 'abc', 'bac']);\n    expect(matches).toEqual(['ab']);\n  });\n\n  xit(\"detects multiple anagrams\",function() {\n    var detector = new Anagram(\"abc\");\n    var matches = detector.match(['ab', 'abc', 'bac']);\n    expect(matches).toEqual(['abc', 'bac']);\n  });\n\n  xit(\"detects anagram\",function() {\n    var detector = new Anagram(\"listen\");\n    var matches = detector.match(['enlists', 'google', 'inlets', 'banana']);\n    expect(matches).toEqual(['inlets']);\n  });\n\n  xit(\"detects multiple anagrams\",function() {\n    var detector = new Anagram(\"allergy\");\n    var matches = detector.match(['gallery', 'ballerina', 'regally', 'clergy', 'largely', 'leading']);\n    expect(matches).toEqual(['gallery', 'regally', 'largely']);\n  });\n});"
    }
  ]
}